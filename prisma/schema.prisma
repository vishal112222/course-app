// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
// generator client {
//   provider = "prisma-client-js"
//   // previewFeatures = ["fullTextSearch", "fullTextIndex"]


// }


enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}



model user {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // Password should be securely hashed
  email     String   @unique
  // profile   Profile? @relation(fields: [id], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Profile {
  id         String      @id @default(uuid()) 
  userId     String      @unique              
  name       String                           
  imageUrl   String?                          
  email      String                           
  role       MemberRole  @default(STUDENT)    
  createdAt  DateTime    @default(now())      
  updatedAt  DateTime    @updatedAt           
}


model Course {
  id          String     @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)

  categoryId  String?    
  category    Category?  @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[] 
  purchases Purchase[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId])
  @@fulltext([title])
  
}

model Attachment {
  id        String     @id @default(uuid()) 
  name      String
  url       String

  courseId  String    
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

model Category {
  id        String     @id @default(uuid()) 
  name      String
  courses   Course[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chapter {
  id          String     @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)

  muxData     MuxData?

  courseId    String     
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
}

model MuxData {
  id          String      @id @default(uuid())   
  assetId     String
  playbackId  String?

  chapterId   String     @unique 
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String     @id @default(uuid())
  userId      String

  chapterId   String    
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}


model Purchase {
  id          String     @id @default(uuid())  
  userId      String

  courseId    String     
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String     @id @default(uuid())  
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

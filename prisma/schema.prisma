// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch", "fullTextIndex"]


}


// model Course {
//   id String @id @default(uuid())
//   userId String
//   title String @db.Text
//   description String? @db.Text
//   imageUrl String? @db.Text
//   price Float?
//   isPublished Boolean @default(false)

//   categoryId String?
//   category Category? @relation(fields: [categoryId], references: [id])

//   attachments Attachment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   @@index([categoryId])
// }


// model Category {
//   id String @id @default(uuid())
//   name String @unique
//   courses Course[]
// }


// model Attachment {
//   id       String @id @default(uuid())
//   name String
//   url String @db.Text
  
//   courseId String
//   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([courseId])

// }




// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["fullTextSearch", "fullTextIndex"]
// }



enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

//this is for mongodb

// model Profile {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @unique
//   name String
//   imageUrl String?  
//   email String  

//   role MemberRole @default(STUDENT)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }



model Profile {
  id         String      @id @default(uuid()) // Primary key as UUID
  userId     String      @unique              // Unique identifier for the user
  name       String                           // Name of the user
  imageUrl   String?                          // Optional profile image URL
  email      String                           // User's email address
  role       MemberRole  @default(STUDENT)    // Enum for role, default is STUDENT
  createdAt  DateTime    @default(now())      // Automatically set to current timestamp
  updatedAt  DateTime    @updatedAt           // Automatically updated on modification
}


model Course {
  id          String     @id @default(uuid())//@id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)

  categoryId  String?    //@db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[] 
  purchases Purchase[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId])
  @@fulltext([title])
  
}

model Attachment {
  id        String     @id @default(uuid()) //@id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String

  courseId  String    // @db.ObjectId
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

model Category {
  id        String     @id @default(uuid()) //@id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chapter {
  id          String     @id @default(uuid())//@id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)

  muxData     MuxData?

  courseId    String     //@db.ObjectId
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
}

model MuxData {
  id          String      @id @default(uuid())   // @id @default(auto()) @map("_id") @db.ObjectId
  assetId     String
  playbackId  String?

  chapterId   String     @unique //@db.ObjectId
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String     @id @default(uuid()) //@id @default(auto()) @map("_id") @db.ObjectId
  userId      String

  chapterId   String    // @db.ObjectId
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}


model Purchase {
  id          String     @id @default(uuid())  //@id @default(auto()) @map("_id") @db.ObjectId
  userId      String

  courseId    String     //@db.ObjectId
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String     @id @default(uuid())  //@id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

// model Logging {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   url       String
//   method    String
//   body      String?
//   response  String?
//   statusCode Int?
//   errorMessage String?
//   createdAt DateTime @default(now())
// }